if [[ "$__bashrc_imported_flag" == "defined-${USER}" ]]; then
    return 0
fi
__bashrc_imported_flag="defined-${USER}"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm) colorize=yes;;
    xterm-color) colorize=yes;;
    xterm-256color) colorize=yes;;
    screen-256color) colorize=yes;;
    eterm-color) colorize=yes;;
esac

if [ "$colorize" == "yes" ]; then
    # enable aliases
    alias ls='ls -G'
    alias grep='grep --color=auto'

    # colors via tput
    reset=$(tput sgr0)
    bold=$(tput bold)
    grey=$(tput setaf 0)
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 4)
    magenta=$(tput setaf 5)
    cyan=$(tput setaf 6)
    white=$(tput setaf 7)

    xreset=$(tput -T xterm sgr0)
    xbold=$(tput -T xterm bold)
    xgrey=$(tput -T xterm setaf 0)
    xred=$(tput -T xterm setaf 1)
    xgreen=$(tput -T xterm setaf 2)
    xyellow=$(tput -T xterm setaf 3)
    xblue=$(tput -T xterm setaf 4)
    xmagenta=$(tput -T xterm setaf 5)
    xcyan=$(tput -T xterm setaf 6)
    xwhite=$(tput -T xterm setaf 7)

    # setup a custom prompt
    if [ "$TERM" = "eterm-color" ]; then
        # emacs prompt
        PS1='╭─( ${yellow}\w${reset}${red}$(__git_ps1 " (%s)")${reset} as ${green}\u${reset} at ${cyan}\h${reset} on ${yellow}\D{%m/%d} \t${reset} )\n╰─${bold}${red}\$${reset} '
    else 
        # regular xterm prompt
        PS1='╭─\[${xreset}\]( \[${xyellow}\]\w\[${xred}\]$(__git_ps1 " (%s)")\[${xreset}\] as \[${xgreen}\]\u\[${xreset}\] at \[${xcyan}\]\h\[${xreset}\] on \[${xyellow}\]\D{%m/%d} \t\[${xreset}\] )\n╰─\[${xbold}\]\[${xred}\]$\[${xreset}\] '
    fi
fi

unset colorize

# enable git completion niceties
GIT_COMPLETION=/usr/local/etc/bash_completion.d/git-completion.bash
source ${GIT_COMPLETION}


# enable git branch notification niceties on the prompt
GIT_PROMPT=/usr/local/etc/bash_completion.d/git-prompt.sh
XCODE_GIT_PROMPT=/Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh
if [ -f "${XCODE_GIT_PROMPT}" ]; then
    source ${XCODE_GIT_PROMPT}
elif [ -f "${GIT_PROMPT}" ]; then
    source ${GIT_PROMPT}
fi

# get vim's slimux/tmux integration to work correctly on MacOS (OSX)
# see https://github.com/epeli/slimux/issues/61
export EVENT_NOKQUEUE=1
export EVENT_NOPOLL=1

# commands beginning with one space don't get stored in .bash_history
export HISTIGNORE=' *'

# original $PATH from initial purchase
#/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# account for 'homebrew'ed software
#export PATH=$HOME/.Renv/bin:$HOME/.goenv/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin

# rbenv setup
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# pyenv setup
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi

# Renv setup
if which Renv > /dev/null; then eval "$(Renv init -)"; fi

# goenv setup
if which goenv > /dev/null; then eval "$(goenv init -)"; fi

# ocaml/opam setup
#source $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

# iTerm2 shortcuts
# based on http://stackoverflow.com/questions/8598021/iterm-2-profiles
function it2profile() { echo -e "\033]50;SetProfile=$1\a"; }
export -f it2profile

# set the default editor
#export EDITOR=/usr/bin/vim
export EDITOR="$HOME/sw/neovim/local/bin/nvim"
