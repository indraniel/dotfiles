* Introduction

We utilize =use-package= to handle downloading and configuring other packages.
Currently =init.el= will check for the presence of =use-package= on launch
and downloads it and installs it if necessary.

The bulk of the emacs configuration is done within this org file.  On launch,
this file is being sourced into =~/.emacs.d/init.el=.  The prose is being
automatically stripped and the remaining =config.el= file is parsed.

/This is also the reason why this file should never be called =init.org=!/

Inspiration about setting this up comes from the following link:

- https://github.com/wasamasa/dotemacs/blob/master/init.org

  
* Constants

Let's define a few useful constants.

#+BEGIN_SRC emacs-lisp
  (defconst dot-emacs "~/.emacs.d")
  (defconst my-home (getenv "HOME"))
  (defconst my-bin (concat my-home "/bin"))
#+END_SRC


* Themes
One of the most important parts of every configuration :-)
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'spacemacs-theme)
  (package-refresh-contents)
  (package-install 'spacemacs-theme))

(unless (package-installed-p 'oceanic-theme)
  (package-refresh-contents)
  (package-install 'oceanic-theme))

(unless (package-installed-p 'twilight-theme)
  (package-refresh-contents)
  (package-install 'twilight-theme))
#+END_SRC


* Basic Setup

** UI Configuration
*** Remove the startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Disable menus and scrollbars
If you want to re-enable, then change =-1= to =1=.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
*** Disable the bell
Remove this line if you want to re-enable.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Highlight the current line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode t)
    (set-face-background hl-line-face "gray25"))
#+END_SRC
*** Enable text symbols
This will change =lambda= to an actual symbol and a few others as well -- only in GUI mode though
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-prettify-symbols-mode t))
#+END_SRC
*** Make scrolling with emacs a bit nicer
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

*** show the column number
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
*** Beacon Highlight
When changing buffers or workspaces, this will momentarily highlight the
last known position of the cursor.
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+END_SRC
** Functionality
*** do not automatically add new line at the end of file
#+BEGIN_SRC emacs-lisp
(setq next-line-add-newlines nil)
#+END_SRC
*** Disable backups and auto-saves
This feels redundant when working with a VCS like git majority of the time.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
*** Change yes-or-no questions into y-or-n questions
Need to type less this way
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Newbie help
This is a helpful tool to assist me figuring out what all those strange-fangled emacs keybindings do
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC



* Company Mode
 Setup based on reading [[https://hristos.triantafillou.us/editing-with-emacs-python-part-2/][editing with emacs: python part 2]]
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq
    company-idle-delay 0
    company-minimum-prefix-length 1
    company-tooltip-align-annotations t
    company-tooltip-limit 20
    company-auto-complete t)
  (set-face-attribute
   'company-preview nil :foreground "black" :underline nil)
  (set-face-attribute
   'company-preview-common nil :inherit 'company-preview)
  (set-face-attribute
   'company-tooltip nil :background "lightgray" :foreground "black")
  (set-face-attribute
   'company-tooltip-selection nil :background "steelblue" :foreground "white")
  (set-face-attribute
   'company-tooltip-common nil :foreground "red" :weight 'bold)
  (set-face-attribute
   'company-tooltip-common-selection nil :foreground "darkgreen" :weight 'bold))
#+END_SRC


* Evil Mode Setup
  
This is very much a work-in-progress.  Evil configuration inspiration
cames from the following links:

- https://github.com/wasamasa/dotemacs/blob/master/init.org
- https://github.com/bradwright/emacs-d/blob/master/packages/init-evil.el
- https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-evil.el
- https://github.com/chrismccord/dot_emacs/blob/master/bundles/anything-bundle.el

** configure evil
*** Ensure that =Esc= quits out of all states, whenever possible
    
This is based on [[https://stackoverflow.com/questions/8483182/evil-mode-best-practice/10166400#10166400][stackoverflow: "Evil Mode best practice?"]]
=minibuffer-keyboard-quit= will abort recursive edit.  In Delete Selection mode,
if the mark is active, just deactivate it;  then it takes a second =keyboard-quit= to abort
the minibuffer.
#+BEGIN_SRC emacs-lisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  (defun evil-esc-quit-everything ()
    (define-key evil-normal-state-map [escape] 'keyboard-escape-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit))
#+END_SRC

*** Enable some vim-ism

These are still hardwired into my fingers.  Maybe I'll stop using them someday...
#+BEGIN_SRC emacs-lisp
  (defun evil-old-vim-cmds ()
     (evil-ex-define-cmd "number" 'linum-mode)
     (evil-ex-define-cmd "n" 'next-buffer)
     (evil-ex-define-cmd "N" 'previous-buffer))
#+END_SRC

** load and configure Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration nil)
    :config ;; tweak evil after loading it
    (evil-esc-quit-everything)
    (evil-old-vim-cmds)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC



* Terminal
=ansi-term= configuration
** Default shell should be bash
It's what I use 99.99% of the time.
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
** Helpful keybinding
Make =Super + Enter= open a new terminal.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC


* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC


* Language Specifics
** Org
*** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Python
*** Company
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure t)

(use-package pyenv-mode
  :ensure t
  :init
    (pyenv-mode))

(use-package company-anaconda
  :ensure t
  :config
    (require 'company)
    (add-to-list 'company-backends 'company-anaconda)
    (add-to-list 'company-backends 'company-files)
    (add-to-list 'company-backends 'company-etags))

(use-package anaconda-mode
  :ensure t
  :config
  (add-hook 'python-mode-hook 'anaconda-mode))

(with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

;(defun python-mode-company-init ()
;  (setq-local company-backends '((company-jedi
;                                  company-files
;                                  company-etags
;                                  company-dabbrev-code))))
;
;(use-package company-jedi
;  :ensure t
;  :config
;    (require 'company)
;    (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC
    
Now when =python-mode= starts, it'll also startup =Jedi.el=, and the jedi server will be 
automatically installed the first time a python file is opened, if it is not already.
Additionally, python versions can be switched, on the fly, with a simple =M=x use-pyenvN=.
    

* TODO

Look into the following packages:

- https://github.com/expez/evil-smartparens
- https://github.com/abo-abo/lispy
- https://github.com/noctuid/lispyville
- https://www.reddit.com/r/emacs/comments/83fzwt/pdftools_evil_bindings/
- https://www.reddit.com/r/emacs/comments/7loyln/evil_collection_has_hit_melpa_enjoy_the_full_vim/
